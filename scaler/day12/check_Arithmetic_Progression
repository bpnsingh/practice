'''
Given an integer array A of size N. Return 1 if the array can be rearranged to form an arithmetic progression, otherwise, return 0.
A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.
Problem Constraints
2 <= N <= 105
-109 <= A[i] <= 109
Input Format
First and only argument is an integer array A of size N.
Output Format
Return 1 if the array can be rearranged to form an arithmetic progression, otherwise, return 0
Example Input
Input 1:
 A = [3, 5, 1]
Input 2:
 A = [2, 4, 1]

Example Output
Output 1:
 1
Output 2:
 0


Example Explanation

Explanation 1:
 We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.
Explanation 2:

 There is no way to reorder the elements to obtain an arithmetic progression.'''


def solve(A):
    # first sort the input array
    N = len(A)
    A.sort()
    # get the diffrence of 1st 2 elements
    d = A[1] - A[0]
    # now we will iterate from 1 st index to last index
    for i in range(1, N-1):
        if A[i+1] - A[i] == d:
            i+=1
        else:
            return 0
    return 1

if __name__ == "__main__":
    print(solve([3, 5, 1]))
    print(solve([2, 4, 1]))
