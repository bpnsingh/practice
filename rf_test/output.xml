<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.5 on darwin)" generated="20210407 10:51:51.740" rpa="false">
<suite id="s1" name="Graph Plot" source="/Users/bipinsengar/PycharmProjects/practice/rf_test/graph_plot.robot">
<test id="s1-t1" name="Measure Sq And Cb 1">
<kw name="Measure Square And Cubic">
<arguments>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.775" level="INFO">${reference_value} = 1</msg>
<status status="PASS" starttime="20210407 10:51:51.774" endtime="20210407 10:51:51.775"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.775" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (1*1, 1000/(1*1), 1*1*1, 1000/(1*1*1))"</msg>
<msg timestamp="20210407 10:51:51.782" level="INFO">${proc} = 1</msg>
<status status="PASS" starttime="20210407 10:51:51.775" endtime="20210407 10:51:51.782"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:51.783" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:51.860" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:51.860" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.783" endtime="20210407 10:51:51.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.861" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:51.860" endtime="20210407 10:51:51.861"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:51.861" endtime="20210407 10:51:51.861"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:51.861" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.861" endtime="20210407 10:51:51.861"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:51.862" level="INFO">${amtch} = square 1.00 inverse 1000.00
cubic 1.00 inverse 1000.00</msg>
<msg timestamp="20210407 10:51:51.862" level="INFO">${sq} = 1.00</msg>
<msg timestamp="20210407 10:51:51.862" level="INFO">${sqinv} = 1000.00</msg>
<msg timestamp="20210407 10:51:51.862" level="INFO">${cb} = 1.00</msg>
<msg timestamp="20210407 10:51:51.862" level="INFO">${cbinv} = 1000.00</msg>
<status status="PASS" starttime="20210407 10:51:51.861" endtime="20210407 10:51:51.862"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.864" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:51.864" endtime="20210407 10:51:51.864"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.774" endtime="20210407 10:51:51.864"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.774" endtime="20210407 10:51:51.864" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t2" name="Measure Sq And Cb 2">
<kw name="Measure Square And Cubic">
<arguments>
<arg>2</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.865" level="INFO">${reference_value} = 2</msg>
<status status="PASS" starttime="20210407 10:51:51.865" endtime="20210407 10:51:51.865"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.866" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (2*2, 1000/(2*2), 2*2*2, 1000/(2*2*2))"</msg>
<msg timestamp="20210407 10:51:51.869" level="INFO">${proc} = 2</msg>
<status status="PASS" starttime="20210407 10:51:51.866" endtime="20210407 10:51:51.869"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:51.870" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:51.893" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:51.893" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.870" endtime="20210407 10:51:51.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.893" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:51.893" endtime="20210407 10:51:51.893"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:51.893" endtime="20210407 10:51:51.894"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:51.894" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.894" endtime="20210407 10:51:51.894"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:51.894" level="INFO">${amtch} = square 4.00 inverse 250.00
cubic 8.00 inverse 125.00</msg>
<msg timestamp="20210407 10:51:51.894" level="INFO">${sq} = 4.00</msg>
<msg timestamp="20210407 10:51:51.894" level="INFO">${sqinv} = 250.00</msg>
<msg timestamp="20210407 10:51:51.895" level="INFO">${cb} = 8.00</msg>
<msg timestamp="20210407 10:51:51.895" level="INFO">${cbinv} = 125.00</msg>
<status status="PASS" starttime="20210407 10:51:51.894" endtime="20210407 10:51:51.895"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.896" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:51.896" endtime="20210407 10:51:51.896"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.865" endtime="20210407 10:51:51.896"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.865" endtime="20210407 10:51:51.896" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t3" name="Measure Sq And Cb 3">
<kw name="Measure Square And Cubic">
<arguments>
<arg>3</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.898" level="INFO">${reference_value} = 3</msg>
<status status="PASS" starttime="20210407 10:51:51.897" endtime="20210407 10:51:51.898"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.898" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (3*3, 1000/(3*3), 3*3*3, 1000/(3*3*3))"</msg>
<msg timestamp="20210407 10:51:51.901" level="INFO">${proc} = 3</msg>
<status status="PASS" starttime="20210407 10:51:51.898" endtime="20210407 10:51:51.902"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:51.902" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:51.925" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:51.925" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.902" endtime="20210407 10:51:51.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.925" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:51.925" endtime="20210407 10:51:51.925"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:51.925" endtime="20210407 10:51:51.926"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:51.926" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.926" endtime="20210407 10:51:51.926"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:51.926" level="INFO">${amtch} = square 9.00 inverse 111.00
cubic 27.00 inverse 37.00</msg>
<msg timestamp="20210407 10:51:51.926" level="INFO">${sq} = 9.00</msg>
<msg timestamp="20210407 10:51:51.926" level="INFO">${sqinv} = 111.00</msg>
<msg timestamp="20210407 10:51:51.926" level="INFO">${cb} = 27.00</msg>
<msg timestamp="20210407 10:51:51.927" level="INFO">${cbinv} = 37.00</msg>
<status status="PASS" starttime="20210407 10:51:51.926" endtime="20210407 10:51:51.927"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.928" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:51.928" endtime="20210407 10:51:51.928"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.897" endtime="20210407 10:51:51.928"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.897" endtime="20210407 10:51:51.929" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t4" name="Measure Sq And Cb 4">
<kw name="Measure Square And Cubic">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.930" level="INFO">${reference_value} = 4</msg>
<status status="PASS" starttime="20210407 10:51:51.930" endtime="20210407 10:51:51.930"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.931" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (4*4, 1000/(4*4), 4*4*4, 1000/(4*4*4))"</msg>
<msg timestamp="20210407 10:51:51.935" level="INFO">${proc} = 4</msg>
<status status="PASS" starttime="20210407 10:51:51.930" endtime="20210407 10:51:51.935"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:51.936" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:51.958" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:51.958" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.935" endtime="20210407 10:51:51.958"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.959" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:51.959" endtime="20210407 10:51:51.959"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:51.959" endtime="20210407 10:51:51.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:51.960" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.959" endtime="20210407 10:51:51.960"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:51.960" level="INFO">${amtch} = square 16.00 inverse 62.00
cubic 64.00 inverse 15.00</msg>
<msg timestamp="20210407 10:51:51.960" level="INFO">${sq} = 16.00</msg>
<msg timestamp="20210407 10:51:51.960" level="INFO">${sqinv} = 62.00</msg>
<msg timestamp="20210407 10:51:51.960" level="INFO">${cb} = 64.00</msg>
<msg timestamp="20210407 10:51:51.960" level="INFO">${cbinv} = 15.00</msg>
<status status="PASS" starttime="20210407 10:51:51.960" endtime="20210407 10:51:51.960"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.962" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:51.962" endtime="20210407 10:51:51.962"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.929" endtime="20210407 10:51:51.962"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.929" endtime="20210407 10:51:51.962" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t5" name="Measure Sq And Cb 5">
<kw name="Measure Square And Cubic">
<arguments>
<arg>5</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.963" level="INFO">${reference_value} = 5</msg>
<status status="PASS" starttime="20210407 10:51:51.963" endtime="20210407 10:51:51.963"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.964" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (5*5, 1000/(5*5), 5*5*5, 1000/(5*5*5))"</msg>
<msg timestamp="20210407 10:51:51.967" level="INFO">${proc} = 5</msg>
<status status="PASS" starttime="20210407 10:51:51.963" endtime="20210407 10:51:51.968"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:51.968" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:51.991" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:51.991" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.968" endtime="20210407 10:51:51.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.991" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:51.991" endtime="20210407 10:51:51.991"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:51.991" endtime="20210407 10:51:51.992"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:51.992" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:51.992" endtime="20210407 10:51:51.992"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:51.992" level="INFO">${amtch} = square 25.00 inverse 40.00
cubic 125.00 inverse 8.00</msg>
<msg timestamp="20210407 10:51:51.992" level="INFO">${sq} = 25.00</msg>
<msg timestamp="20210407 10:51:51.992" level="INFO">${sqinv} = 40.00</msg>
<msg timestamp="20210407 10:51:51.993" level="INFO">${cb} = 125.00</msg>
<msg timestamp="20210407 10:51:51.993" level="INFO">${cbinv} = 8.00</msg>
<status status="PASS" starttime="20210407 10:51:51.992" endtime="20210407 10:51:51.993"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:51.994" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:51.994" endtime="20210407 10:51:51.994"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.963" endtime="20210407 10:51:51.994"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.962" endtime="20210407 10:51:51.994" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t6" name="Measure Sq And Cb 6">
<kw name="Measure Square And Cubic">
<arguments>
<arg>6</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:51.996" level="INFO">${reference_value} = 6</msg>
<status status="PASS" starttime="20210407 10:51:51.996" endtime="20210407 10:51:51.996"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:51.997" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (6*6, 1000/(6*6), 6*6*6, 1000/(6*6*6))"</msg>
<msg timestamp="20210407 10:51:52.000" level="INFO">${proc} = 6</msg>
<status status="PASS" starttime="20210407 10:51:51.996" endtime="20210407 10:51:52.000"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:52.001" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:52.023" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:52.023" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:52.000" endtime="20210407 10:51:52.023"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:52.024" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:52.024" endtime="20210407 10:51:52.024"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:52.024" endtime="20210407 10:51:52.024"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:52.025" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:52.024" endtime="20210407 10:51:52.025"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:52.025" level="INFO">${amtch} = square 36.00 inverse 27.00
cubic 216.00 inverse 4.00</msg>
<msg timestamp="20210407 10:51:52.025" level="INFO">${sq} = 36.00</msg>
<msg timestamp="20210407 10:51:52.025" level="INFO">${sqinv} = 27.00</msg>
<msg timestamp="20210407 10:51:52.025" level="INFO">${cb} = 216.00</msg>
<msg timestamp="20210407 10:51:52.025" level="INFO">${cbinv} = 4.00</msg>
<status status="PASS" starttime="20210407 10:51:52.025" endtime="20210407 10:51:52.025"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:52.027" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:52.027" endtime="20210407 10:51:52.027"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:51.995" endtime="20210407 10:51:52.028"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:51.995" endtime="20210407 10:51:52.028" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<test id="s1-t7" name="Measure Sq And Cb 7">
<kw name="Measure Square And Cubic">
<arguments>
<arg>7</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${testinput}</arg>
</arguments>
<assign>
<var>${reference_value}</var>
</assign>
<msg timestamp="20210407 10:51:52.029" level="INFO">${reference_value} = 7</msg>
<status status="PASS" starttime="20210407 10:51:52.029" endtime="20210407 10:51:52.029"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>/usr/bin/python</arg>
<arg>-c</arg>
<arg>print 'square %.2f inverse %.2f\\ncubic %.2f inverse %.2f' % (${testinput}*${testinput}, 1000/(${testinput}*${testinput}), ${testinput}*${testinput}*${testinput}, 1000/(${testinput}*${testinput}*${testinput}))</arg>
</arguments>
<assign>
<var>${proc}</var>
</assign>
<msg timestamp="20210407 10:51:52.029" level="INFO">Starting process:
/usr/bin/python -c "print 'square %.2f inverse %.2f\ncubic %.2f inverse %.2f' % (7*7, 1000/(7*7), 7*7*7, 1000/(7*7*7))"</msg>
<msg timestamp="20210407 10:51:52.033" level="INFO">${proc} = 7</msg>
<status status="PASS" starttime="20210407 10:51:52.029" endtime="20210407 10:51:52.033"></status>
</kw>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210407 10:51:52.033" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20210407 10:51:52.055" level="INFO">Process completed.</msg>
<msg timestamp="20210407 10:51:52.056" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20210407 10:51:52.033" endtime="20210407 10:51:52.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20210407 10:51:52.056" level="INFO"></msg>
<status status="PASS" starttime="20210407 10:51:52.056" endtime="20210407 10:51:52.056"></status>
</kw>
<kw name="Process Should Be Stopped" library="Process">
<doc>Verifies that the process is not running.</doc>
<arguments>
<arg>${proc}</arg>
</arguments>
<status status="PASS" starttime="20210407 10:51:52.056" endtime="20210407 10:51:52.056"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210407 10:51:52.057" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210407 10:51:52.056" endtime="20210407 10:51:52.057"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)[^\\d]+(\\d+.\\d+)</arg>
</arguments>
<assign>
<var>${amtch}</var>
<var>${sq}</var>
<var>${sqinv}</var>
<var>${cb}</var>
<var>${cbinv}</var>
</assign>
<msg timestamp="20210407 10:51:52.057" level="INFO">${amtch} = square 49.00 inverse 20.00
cubic 343.00 inverse 2.00</msg>
<msg timestamp="20210407 10:51:52.057" level="INFO">${sq} = 49.00</msg>
<msg timestamp="20210407 10:51:52.057" level="INFO">${sqinv} = 20.00</msg>
<msg timestamp="20210407 10:51:52.057" level="INFO">${cb} = 343.00</msg>
<msg timestamp="20210407 10:51:52.057" level="INFO">${cbinv} = 2.00</msg>
<status status="PASS" starttime="20210407 10:51:52.057" endtime="20210407 10:51:52.057"></status>
</kw>
<kw name="Add To Chart">
<arguments>
<arg>${sq_label}</arg>
<arg>${testinput}</arg>
<arg>${sq}</arg>
<arg>${sqinv}</arg>
</arguments>
<msg timestamp="20210407 10:51:52.059" level="FAIL">No keyword with name 'Add To Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:52.059" endtime="20210407 10:51:52.059"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:52.028" endtime="20210407 10:51:52.059"></status>
</kw>
<tags>
<tag>chart</tag>
</tags>
<status status="FAIL" starttime="20210407 10:51:52.028" endtime="20210407 10:51:52.059" critical="yes">No keyword with name 'Add To Chart' found.</status>
</test>
<kw name="Embed Chart Diagrams" type="teardown">
<kw name="Embed Bar Chart">
<arguments>
<arg>Square Demo Chart</arg>
<arg>x_axis=0</arg>
<arg>y_axis=1</arg>
<arg>outfile=out-square.svg</arg>
</arguments>
<msg timestamp="20210407 10:51:52.061" level="FAIL">No keyword with name 'Embed Bar Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:52.061" endtime="20210407 10:51:52.061"></status>
</kw>
<kw name="Embed Bar Chart">
<arguments>
<arg>Inverse Demo Chart</arg>
<arg>x_axis=0</arg>
<arg>y_axis=2</arg>
<arg>outfile=out-inverse.svg</arg>
</arguments>
<msg timestamp="20210407 10:51:52.063" level="FAIL">No keyword with name 'Embed Bar Chart' found.</msg>
<status status="FAIL" starttime="20210407 10:51:52.063" endtime="20210407 10:51:52.063"></status>
</kw>
<status status="FAIL" starttime="20210407 10:51:52.060" endtime="20210407 10:51:52.063">Several failures occurred:

1) No keyword with name 'Embed Bar Chart' found.

2) No keyword with name 'Embed Bar Chart' found.</status>
</kw>
<doc>Parse the sleep time from console and collect the measured values for a chart diagram, the suite-teardown will embed the chart diagram to log-file.</doc>
<status status="FAIL" starttime="20210407 10:51:51.741" endtime="20210407 10:51:52.063">Suite teardown failed:
Several failures occurred:

1) No keyword with name 'Embed Bar Chart' found.

2) No keyword with name 'Embed Bar Chart' found.</status>
</suite>
<statistics>
<total>
<stat pass="0" fail="7">Critical Tests</stat>
<stat pass="0" fail="7">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="7">chart</stat>
</tag>
<suite>
<stat pass="0" fail="7" id="s1" name="Graph Plot">Graph Plot</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210407 10:51:51.763" level="ERROR">Error in file '/Users/bipinsengar/PycharmProjects/practice/rf_test/graph_plot.robot' on line 2: Importing test library 'RobotChart' failed: ModuleNotFoundError: No module named 'RobotChart'
Traceback (most recent call last):
  None
PYTHONPATH:
  /Users/bipinsengar/.pyenv/versions/3.8.5/bin
  /Users/bipinsengar/.pyenv/versions/3.8.5/lib/python38.zip
  /Users/bipinsengar/.pyenv/versions/3.8.5/lib/python3.8
  /Users/bipinsengar/.pyenv/versions/3.8.5/lib/python3.8/lib-dynload
  /Users/bipinsengar/.pyenv/versions/3.8.5/lib/python3.8/site-packages</msg>
</errors>
</robot>
